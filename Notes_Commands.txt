The term "API" in the context of Java Collection API refers to the Application Programming Interface,
which is a set of predefined methods and classes that developers can use to interact with the Java platform.
The Java Collection API is part of the Java Standard Edition (Java SE) and is included in the Java Development Kit
(JDK). It provides a framework for storing, manipulating,
and accessing data structures like lists, sets, and maps.

The reason it's called an API, even though it doesn't call any external web service,
is because it follows the general definition of an API. An API is a set of rules and protocols
for building and interacting with software applications.
It defines the methods and data formats that a program can use to communicate with other
programs or components. In the case of the Java Collection API,
it defines the methods and classes that Java developers can use to work with collections of objects.

The Java Collection API is designed to be used internally within Java applications
to manage collections of objects. It provides a standard way to perform common operations on collections,
such as adding, removing, and searching for elements. This standardization helps ensure that Java applications
can work with collections in a consistent manner, regardless of the specific implementation of the collection.

The term "API" is used broadly to refer to any interface that allows one software component to
interact with another. This includes not only web services that communicate over the internet
but also internal APIs that facilitate communication between different parts of a software application.
The Java Collection API is an example of an internal API, as it is used internally within Java applications
to manage collections of objects

----------------------------------------------------------------------------------------------------------------------------
Web services, REST, and SOAP are all technologies used for building and interacting with web services,
but they serve different purposes and have distinct characteristics.
----------------------------------------------------------------------------------------------------------------------------

Web services are a way for applications to communicate with each other over the internet.
They allow different software applications to interact and exchange data and services without
the need for the user to understand the underlying technology.
Web services can be built using various protocols and standards, including SOAP and REST
----------------------------------------------------------------------------------------------------------------------------

What's Rest API (Representational State Transfer):
Definition: REST is an architectural style for designing networked applications. It uses standard HTTP methods (GET, POST, PUT, DELETE) to perform operations on resources represented in web services.
Characteristics:REST is an architectural pattern that does not enforce a specific protocol or message format.
It can use various data formats, including JSON, which is more lightweight and efficient than XML.
It is stateless, meaning each request from a client to a server must contain all the information needed to understand and process the request.
RESTful's services are designed to be simple and scalable, making them suitable for web, mobile, and social applications.
It is easier to implement and requires less bandwidth compared to SOAP. REST also supports caching, which can improve performance 34.

----------------------------------------------------------------------------------------------------------------------------


What is Soap API(Simple Object Access Protocol):
Definition: SOAP is a protocol for exchanging structured information in web services using XML.
It defines a standard way for applications to communicate with each other over the internet.
Characteristics:SOAP is a protocol with a specification that includes a WSDL (Web Services Description Language)
file, which provides information about the web service, including what it does and its location.
It uses XML for message format, which can be verbose and requires more bandwidth.
SOAP supports various security mechanisms, including WS-Security, which adds enterprise security features.
It is suitable for scenarios requiring high security, such as financial transactions or telecommunication services 34.
----------------------------------------------------------------------------------------------------------------------------

What is the difference between Rest and Soap API:
1. Rest API is a set of rules that developers follow when they create their API.
2. SOAP API is a messaging protocol that allows programs that run on disparate operating systems to communicate using HTTP and XML.
3. REST APIs uses multiple standards like HTTP, JSON, URL, and XML while SOAP APIs is largely based on HTTP and XML.
4. REST APIs are easy to integrate with existing websites with no need to install any additional software while SOAP APIs are not easy to integrate with existing websites.
5. REST APIs are considered to be faster than SOAP APIs.
6. REST APIs are more flexible than SOAP APIs.
----------------------------------------------------------------------------------------------------------------------------

What is the difference between Get and Post:
1. GET requests data from a specified resource while POST submits data to be processed to a specified resource.
2. GET requests can be cached and remain in the browser history while POST requests are never cached and do not remain in the browser history.
3. GET requests can be bookmarked while POST requests cannot be bookmarked.
4. GET requests have length restrictions while POST requests have no restrictions.
5. GET requests should be used only to retrieve data while POST requests should be used to update data.
----------------------------------------------------------------------------------------------------------------------------

What is the difference between Put and Patch:
1. PUT requests to update an existing resource while PATCH requests to update a part of an existing resource.
2. PUT requests are idempotent while PATCH requests are not idempotent.
3. PUT requests require the client to send the entire updated resource while PATCH requests require the client to send only the updated part of the resource.
4. PUT requests are used to update the entire resource while PATCH requests are used to update a part of the resource.
----------------------------------------------------------------------------------------------------------------------------

What is the difference between Put and Post:
1. PUT requests to update an existing resource while POST submits data to be processed to a specified resource.
2. PUT requests are idempotent while POST requests are not idempotent.
3. PUT requests require the client to send the entire updated resource while POST requests require the client to send only the data to be processed.
4. PUT requests are used to update the entire resource while POST requests are used to submit data to be processed.
----------------------------------------------------------------------------------------------------------------------------



#Editor to view the API response Online
https://jsoncrack.com/editor


#Link to the API: https://reqres.in/
https://reqres.in/
https://www.deckofcardsapi.com/

#Lisf of Free APIs
https://iamsajan.com/free-api-without-an-api-key/


#Online Rest Client
https://restninja.io/
https://reqbin.com/


#JSON Path finder
https://jsonpathfinder.com/

#Static imports are needed to use the methods without using the class name
https://github.com/rest-assured/rest-assured/wiki/Usage